'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@tiptap/core');
var prosemirrorState = require('prosemirror-state');
var linkifyjs = require('linkifyjs');

const Link = core.Mark.create({
    name: 'link',
    priority: 1000,
    inclusive: false,
    addOptions() {
        return {
            openOnClick: true,
            linkOnPaste: true,
            HTMLAttributes: {
                target: '_blank',
                rel: 'noopener noreferrer nofollow',
            },
        };
    },
    addAttributes() {
        return {
            href: {
                default: null,
            },
            target: {
                default: this.options.HTMLAttributes.target,
            },
        };
    },
    parseHTML() {
        return [
            { tag: 'a[href]' },
        ];
    },
    renderHTML({ HTMLAttributes }) {
        return ['a', core.mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
    },
    addCommands() {
        return {
            setLink: attributes => ({ commands }) => {
                return commands.setMark('link', attributes);
            },
            toggleLink: attributes => ({ commands }) => {
                return commands.toggleMark('link', attributes, { extendEmptyMarkRange: true });
            },
            unsetLink: () => ({ commands }) => {
                return commands.unsetMark('link', { extendEmptyMarkRange: true });
            },
        };
    },
    addPasteRules() {
        return [
            core.markPasteRule({
                find: text => linkifyjs.find(text)
                    .filter(link => link.isLink)
                    .map(link => ({
                    text: link.value,
                    index: link.start,
                    data: link,
                })),
                type: this.type,
                getAttributes: match => {
                    var _a;
                    return ({
                        href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href,
                    });
                },
            }),
        ];
    },
    addProseMirrorPlugins() {
        const plugins = [];
        if (this.options.openOnClick) {
            plugins.push(new prosemirrorState.Plugin({
                key: new prosemirrorState.PluginKey('handleClickLink'),
                props: {
                    handleClick: (view, pos, event) => {
                        var _a;
                        const attrs = this.editor.getAttributes('link');
                        const link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');
                        if (link && attrs.href) {
                            window.open(attrs.href, attrs.target);
                            return true;
                        }
                        return false;
                    },
                },
            }));
        }
        if (this.options.linkOnPaste) {
            plugins.push(new prosemirrorState.Plugin({
                key: new prosemirrorState.PluginKey('handlePasteLink'),
                props: {
                    handlePaste: (view, event, slice) => {
                        const { state } = view;
                        const { selection } = state;
                        const { empty } = selection;
                        if (empty) {
                            return false;
                        }
                        let textContent = '';
                        slice.content.forEach(node => {
                            textContent += node.textContent;
                        });
                        const link = linkifyjs.find(textContent)
                            .find(item => item.isLink && item.value === textContent);
                        if (!textContent || !link) {
                            return false;
                        }
                        this.editor.commands.setMark(this.type, {
                            href: link.href,
                        });
                        return true;
                    },
                },
            }));
        }
        return plugins;
    },
});

exports.Link = Link;
exports["default"] = Link;
//# sourceMappingURL=tiptap-extension-link.cjs.js.map
