{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g;\nconst Bold = Mark.create({\n  name: 'bold',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: node => node.style.fontWeight !== 'normal' && null\n    }, {\n      style: 'font-weight',\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setBold: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark('bold');\n      },\n      toggleBold: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark('bold');\n      },\n      unsetBold: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark('bold');\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Bold, Bold as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Bold","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontWeight","value","test","renderHTML","_ref","mergeAttributes","options","addCommands","setBold","_ref2","commands","setMark","toggleBold","_ref3","toggleMark","unsetBold","_ref4","unsetMark","addKeyboardShortcuts","Mod-b","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["/home/vinayak/Projects/websocket/ui/websocket_ui/node_modules/@tiptap/extension-bold/src/bold.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark('bold')\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark('bold')\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark('bold')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";MA8BaA,cAAc,GAAG;MACjBC,cAAc,GAAG;MACjBC,oBAAoB,GAAG;MACvBC,oBAAoB,GAAG;MAEvBC,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAc;EAC3CC,IAAI,EAAE,MAAM;EAEZC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAASA,CAAA;IACP,OAAO,CACL;MACEC,GAAG,EAAE;KACN,EACD;MACEA,GAAG,EAAE,GAAG;MACRC,QAAQ,EAAEC,IAAI,IAAKA,IAAoB,CAACC,KAAK,CAACC,UAAU,KAAK,QAAQ,IAAI;KAC1E,EACD;MACED,KAAK,EAAE,aAAa;MACpBF,QAAQ,EAAEI,KAAK,IAAI,2BAA2B,CAACC,IAAI,CAACD,KAAe,CAAC,IAAI;KACzE,CACF;GACF;EAEDE,UAAUA,CAAAC,IAAA,EAAmB;IAAA,IAAlB;MAAEV;IAAc,CAAE,GAAAU,IAAA;IAC3B,OAAO,CAAC,QAAQ,EAAEC,eAAe,CAAC,IAAI,CAACC,OAAO,CAACZ,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACnF;EAEDa,WAAWA,CAAA;IACT,OAAO;MACLC,OAAO,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEC;QAAQ,CAAE,GAAAD,KAAA;QAC1B,OAAOC,QAAQ,CAACC,OAAO,CAAC,MAAM,CAAC;OAChC;MACDC,UAAU,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEH;QAAQ,CAAE,GAAAG,KAAA;QAC7B,OAAOH,QAAQ,CAACI,UAAU,CAAC,MAAM,CAAC;OACnC;MACDC,SAAS,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEN;QAAQ,CAAE,GAAAM,KAAA;QAC5B,OAAON,QAAQ,CAACO,SAAS,CAAC,MAAM,CAAC;;KAEpC;GACF;EAEDC,oBAAoBA,CAAA;IAClB,OAAO;MACL,OAAO,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACV,QAAQ,CAACE,UAAU;KAC/C;GACF;EAEDS,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEtC,cAAc;MACpBuC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFF,aAAa,CAAC;MACZC,IAAI,EAAEpC,oBAAoB;MAC1BqC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAErC,cAAc;MACpBsC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFE,aAAa,CAAC;MACZH,IAAI,EAAEnC,oBAAoB;MAC1BoC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;CAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}