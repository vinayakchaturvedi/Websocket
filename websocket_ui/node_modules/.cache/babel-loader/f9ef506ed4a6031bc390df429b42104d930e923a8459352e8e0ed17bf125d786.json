{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/;\nconst pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g;\nconst Code = Mark.create({\n  name: 'code',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  excludes: '_',\n  code: true,\n  parseHTML() {\n    return [{\n      tag: 'code'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setCode: () => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.setMark('code');\n      },\n      toggleCode: () => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        return commands.toggleMark('code');\n      },\n      unsetCode: () => _ref4 => {\n        let {\n          commands\n        } = _ref4;\n        return commands.unsetMark('code');\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Code, Code as default, inputRegex, pasteRegex };","map":{"version":3,"names":["inputRegex","pasteRegex","Code","Mark","create","name","addOptions","HTMLAttributes","excludes","code","parseHTML","tag","renderHTML","_ref","mergeAttributes","options","addCommands","setCode","_ref2","commands","setMark","toggleCode","_ref3","toggleMark","unsetCode","_ref4","unsetMark","addKeyboardShortcuts","Mod-e","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["/home/vinayak/Projects/websocket/ui/websocket_ui/node_modules/@tiptap/extension-code/src/code.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface CodeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType,\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType,\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/\nexport const pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g\n\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  parseHTML() {\n    return [\n      { tag: 'code' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({ commands }) => {\n        return commands.setMark('code')\n      },\n      toggleCode: () => ({ commands }) => {\n        return commands.toggleMark('code')\n      },\n      unsetCode: () => ({ commands }) => {\n        return commands.unsetMark('code')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";MA8BaA,UAAU,GAAG;MACbC,UAAU,GAAG;MAEbC,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAc;EAC3CC,IAAI,EAAE,MAAM;EAEZC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,QAAQ,EAAE,GAAG;EAEbC,IAAI,EAAE,IAAI;EAEVC,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAM,CAAE,CAChB;GACF;EAEDC,UAAUA,CAAAC,IAAA,EAAmB;IAAA,IAAlB;MAAEN;IAAc,CAAE,GAAAM,IAAA;IAC3B,OAAO,CAAC,MAAM,EAAEC,eAAe,CAAC,IAAI,CAACC,OAAO,CAACR,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACjF;EAEDS,WAAWA,CAAA;IACT,OAAO;MACLC,OAAO,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEC;QAAQ,CAAE,GAAAD,KAAA;QAC1B,OAAOC,QAAQ,CAACC,OAAO,CAAC,MAAM,CAAC;OAChC;MACDC,UAAU,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEH;QAAQ,CAAE,GAAAG,KAAA;QAC7B,OAAOH,QAAQ,CAACI,UAAU,CAAC,MAAM,CAAC;OACnC;MACDC,SAAS,EAAEA,CAAA,KAAMC,KAAA,IAAa;QAAA,IAAZ;UAAEN;QAAQ,CAAE,GAAAM,KAAA;QAC5B,OAAON,QAAQ,CAACO,SAAS,CAAC,MAAM,CAAC;;KAEpC;GACF;EAEDC,oBAAoBA,CAAA;IAClB,OAAO;MACL,OAAO,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACV,QAAQ,CAACE,UAAU;KAC/C;GACF;EAEDS,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEhC,UAAU;MAChBiC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE/B,UAAU;MAChBgC,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;CAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}